(define (n-root? origin expo n-times)
	(define (average x y) (/ (+ x y) 2))
	(define (fx x)
	 	(/ origin (expt x (- expo 1))))
	(define (average-damp x)
		(average x (fx x)))
	(define (average-damp-n x n)
		(define (iter result n)
		 	(if (= n 0)
			 	result
			(iter (average-damp result) (- n 1))))
		(iter x n))
	(define (fixed-point first-guess)
		(define tolerance 0.00001)
	 	(define (close-enough? v1 v2)
		 	(< (abs (- v1 v2)) tolerance))
		(define (try guess step)
		 	(let ((next (average-damp-n guess n-times)))
			 	(if (close-enough? guess next)
				 	(begin
					 	(newline)
					 	(display step)
						(display " steps\n")
						next)
					(try next (+ 1 step)))))
		(try first-guess 0))
	(fixed-point 1.0))
