(load "2.7.scm")

(define (mul-interval x y)
 	(let ((p1 (* (lower-bound x) (lower-bound y)))
		  (p2 (* (lower-bound x) (upper-bound y)))
		  (p3 (* (upper-bound x) (lower-bound y)))
		  (p4 (* (upper-bound x) (upper-bound y))))
	 (begin
 	 (display p1)
	 (newline)
	 (display p2)
	 (newline)
	 (display p3)
	 (newline)
	 (display p4)
	 (newline)
	 (cond ((and (<= (lower-bound x) 0) (<= (upper-bound x) 0))
		   		(cond ((and (<= (lower-bound y) 0) (<= (upper-bound y) 0))
					  	(make-interval p4 p1))
					  ((and (<= (lower-bound y) 0) (>= (upper-bound y) 0))
					   	(make-interval p2 p1))
					  ((and (>= (lower-bound y) 0) (>= (upper-bound y) 0))
					   	(make-interval p2 p3))))
		  ((and (<= (lower-bound x) 0) (>= (upper-bound x) 0))
		   		(cond ((and (<= (lower-bound y) 0) (<= (upper-bound y) 0))
					   	(make-interval p3 p1))
					  ((and (<= (lower-bound y) 0) (>= (upper-bound y) 0))
					   	(let ((ub (max p1 p4))
							  (lb (min p2 p3)))
						 (make-interval lb ub)))
				      (else 
					   	(make-interval p2 p4))))
		  ((and (>= (lower-bound x) 0) (>= (upper-bound x) 0))
		   		(cond ((and (<= (lower-bound y) 0) (<= upper-bound y) 0)
					   	(make-interval p3 p2))
					  ((and (<= (lower-bound y) 0) (>= upper-bound y) 0)
					   	(make-interval p3 p4))
				      (else 
					   	(make-interval p1 p4))))))))

(define z (mul-interval (make-interval -9 1) (make-interval -97 3)))
