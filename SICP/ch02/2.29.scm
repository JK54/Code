(define (make-mobile left right)
 	(list left right))

(define (make-branch length structure)
 	(list length structure))

(define (left-branch mobile)
 	(car mobile))
(define (right-branch mobile)
 	(cdr mobile))
(define (branch-length branch)
	(caar branch))
(define (branch-weight branch)
	(cdr branch))
(define (branch-structure branch)
 	(if (pair? (cdr branch))
	 		(cadr branch)
			(cadar branch)))

(define (leaf? branch) 
 	(not (pair? (branch-structure branch))))

(define (total-weight mobile)
 	(if (pair? mobile)
	 	(if (leaf? mobile)
				(branch-structure mobile)
				(+ (total-weight (left-branch mobile)) (total-weight (right-branch mobile))))
		0))

(define (torque branch)
 	(if (pair? branch)
	 	(if (leaf? branch)
		 	(* (branch-length branch) (branch-structure branch))
			(+ (torque (left-branch branch)) (torque (right-branch branch))))
		0))
(define (balanced? mobile)
	(= (torque (left-branch mobile)) (torque (right-branch mobile))))

(define x (make-mobile (make-branch (make-branch 4 (make-mobile (make-branch 3 1) (make-branch 2 2) )) (make-branch 1 3)) (make-branch 1 4)))
(define y (left-branch x))
(define z (right-branch x))

(trace-entry torque)
(balanced? x)
